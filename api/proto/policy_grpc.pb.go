// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: policy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PolicyEngine_Generate_FullMethodName   = "/protocols.PolicyEngine/Generate"
	PolicyEngine_GetResults_FullMethodName = "/protocols.PolicyEngine/GetResults"
	PolicyEngine_Configure_FullMethodName  = "/protocols.PolicyEngine/Configure"
)

// PolicyEngineClient is the client API for PolicyEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyEngineClient interface {
	Generate(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	GetResults(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
}

type policyEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyEngineClient(cc grpc.ClientConnInterface) PolicyEngineClient {
	return &policyEngineClient{cc}
}

func (c *policyEngineClient) Generate(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, PolicyEngine_Generate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyEngineClient) GetResults(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.cc.Invoke(ctx, PolicyEngine_GetResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyEngineClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, PolicyEngine_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyEngineServer is the server API for PolicyEngine service.
// All implementations must embed UnimplementedPolicyEngineServer
// for forward compatibility
type PolicyEngineServer interface {
	Generate(context.Context, *PolicyRequest) (*GenerateResponse, error)
	GetResults(context.Context, *PolicyRequest) (*ResultsResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	mustEmbedUnimplementedPolicyEngineServer()
}

// UnimplementedPolicyEngineServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyEngineServer struct {
}

func (UnimplementedPolicyEngineServer) Generate(context.Context, *PolicyRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedPolicyEngineServer) GetResults(context.Context, *PolicyRequest) (*ResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedPolicyEngineServer) Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedPolicyEngineServer) mustEmbedUnimplementedPolicyEngineServer() {}

// UnsafePolicyEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyEngineServer will
// result in compilation errors.
type UnsafePolicyEngineServer interface {
	mustEmbedUnimplementedPolicyEngineServer()
}

func RegisterPolicyEngineServer(s grpc.ServiceRegistrar, srv PolicyEngineServer) {
	s.RegisterService(&PolicyEngine_ServiceDesc, srv)
}

func _PolicyEngine_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyEngineServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyEngine_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyEngineServer).Generate(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyEngine_GetResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyEngineServer).GetResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyEngine_GetResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyEngineServer).GetResults(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyEngine_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyEngineServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolicyEngine_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyEngineServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyEngine_ServiceDesc is the grpc.ServiceDesc for PolicyEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocols.PolicyEngine",
	HandlerType: (*PolicyEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _PolicyEngine_Generate_Handler,
		},
		{
			MethodName: "GetResults",
			Handler:    _PolicyEngine_GetResults_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _PolicyEngine_Configure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy.proto",
}
